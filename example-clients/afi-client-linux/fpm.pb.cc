// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fpm/fpm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fpm/fpm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fpm {

namespace {

const ::google::protobuf::Descriptor* Nexthop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Nexthop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RouteType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fpm_2ffpm_2eproto() {
  protobuf_AddDesc_fpm_2ffpm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fpm/fpm.proto");
  GOOGLE_CHECK(file != NULL);
  Nexthop_descriptor_ = file->message_type(0);
  static const int Nexthop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nexthop, if_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nexthop, address_),
  };
  Nexthop_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Nexthop_descriptor_,
      Nexthop::default_instance_,
      Nexthop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nexthop, _has_bits_[0]),
      -1,
      -1,
      sizeof(Nexthop),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Nexthop, _internal_metadata_),
      -1);
  RouteKey_descriptor_ = file->message_type(1);
  static const int RouteKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteKey, prefix_),
  };
  RouteKey_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouteKey_descriptor_,
      RouteKey::default_instance_,
      RouteKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteKey, _has_bits_[0]),
      -1,
      -1,
      sizeof(RouteKey),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteKey, _internal_metadata_),
      -1);
  DeleteRoute_descriptor_ = file->message_type(2);
  static const int DeleteRoute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, vrf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, address_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, sub_address_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, key_),
  };
  DeleteRoute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeleteRoute_descriptor_,
      DeleteRoute::default_instance_,
      DeleteRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeleteRoute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRoute, _internal_metadata_),
      -1);
  AddRoute_descriptor_ = file->message_type(3);
  static const int AddRoute_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, vrf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, address_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, sub_address_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, route_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, nexthops_),
  };
  AddRoute_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddRoute_descriptor_,
      AddRoute::default_instance_,
      AddRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddRoute),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRoute, _internal_metadata_),
      -1);
  Message_descriptor_ = file->message_type(4);
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, add_route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, delete_route_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
  RouteType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fpm_2ffpm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Nexthop_descriptor_, &Nexthop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouteKey_descriptor_, &RouteKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeleteRoute_descriptor_, &DeleteRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddRoute_descriptor_, &AddRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fpm_2ffpm_2eproto() {
  delete Nexthop::default_instance_;
  delete Nexthop_reflection_;
  delete RouteKey::default_instance_;
  delete RouteKey_reflection_;
  delete DeleteRoute::default_instance_;
  delete DeleteRoute_reflection_;
  delete AddRoute::default_instance_;
  delete AddRoute_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_fpm_2ffpm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::qpb::protobuf_AddDesc_qpb_2fqpb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfpm/fpm.proto\022\003fpm\032\rqpb/qpb.proto\"L\n\007N"
    "exthop\022 \n\005if_id\030\002 \001(\0132\021.qpb.IfIdentifier"
    "\022\037\n\007address\030\003 \001(\0132\016.qpb.L3Address\")\n\010Rou"
    "teKey\022\035\n\006prefix\030\001 \001(\0132\r.qpb.L3Prefix\"\230\001\n"
    "\013DeleteRoute\022\016\n\006vrf_id\030\001 \002(\r\022*\n\016address_"
    "family\030\002 \002(\0162\022.qpb.AddressFamily\0221\n\022sub_"
    "address_family\030\003 \002(\0162\025.qpb.SubAddressFam"
    "ily\022\032\n\003key\030\004 \002(\0132\r.fpm.RouteKey\"\212\002\n\010AddR"
    "oute\022\016\n\006vrf_id\030\001 \002(\r\022*\n\016address_family\030\002"
    " \002(\0162\022.qpb.AddressFamily\0221\n\022sub_address_"
    "family\030\003 \002(\0162\025.qpb.SubAddressFamily\022\032\n\003k"
    "ey\030\004 \002(\0132\r.fpm.RouteKey\022\"\n\nroute_type\030\005 "
    "\001(\0162\016.fpm.RouteType\022\037\n\010protocol\030\006 \002(\0162\r."
    "qpb.Protocol\022\016\n\006metric\030\010 \002(\005\022\036\n\010nexthops"
    "\030\t \003(\0132\014.fpm.Nexthop\"\256\001\n\007Message\022\037\n\004type"
    "\030\001 \001(\0162\021.fpm.Message.Type\022 \n\tadd_route\030\002"
    " \001(\0132\r.fpm.AddRoute\022&\n\014delete_route\030\003 \001("
    "\0132\020.fpm.DeleteRoute\"8\n\004Type\022\017\n\013UNKNOWN_M"
    "SG\020\000\022\r\n\tADD_ROUTE\020\001\022\020\n\014DELETE_ROUTE\020\002*D\n"
    "\tRouteType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\017\n\013U"
    "NREACHABLE\020\002\022\r\n\tBLACKHOLE\020\003", 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fpm/fpm.proto", &protobuf_RegisterTypes);
  Nexthop::default_instance_ = new Nexthop();
  RouteKey::default_instance_ = new RouteKey();
  DeleteRoute::default_instance_ = new DeleteRoute();
  AddRoute::default_instance_ = new AddRoute();
  Message::default_instance_ = new Message();
  Nexthop::default_instance_->InitAsDefaultInstance();
  RouteKey::default_instance_->InitAsDefaultInstance();
  DeleteRoute::default_instance_->InitAsDefaultInstance();
  AddRoute::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fpm_2ffpm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fpm_2ffpm_2eproto {
  StaticDescriptorInitializer_fpm_2ffpm_2eproto() {
    protobuf_AddDesc_fpm_2ffpm_2eproto();
  }
} static_descriptor_initializer_fpm_2ffpm_2eproto_;
const ::google::protobuf::EnumDescriptor* RouteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteType_descriptor_;
}
bool RouteType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nexthop::kIfIdFieldNumber;
const int Nexthop::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nexthop::Nexthop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.Nexthop)
}

void Nexthop::InitAsDefaultInstance() {
  if_id_ = const_cast< ::qpb::IfIdentifier*>(&::qpb::IfIdentifier::default_instance());
  address_ = const_cast< ::qpb::L3Address*>(&::qpb::L3Address::default_instance());
}

Nexthop::Nexthop(const Nexthop& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fpm.Nexthop)
}

void Nexthop::SharedCtor() {
  _cached_size_ = 0;
  if_id_ = NULL;
  address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Nexthop::~Nexthop() {
  // @@protoc_insertion_point(destructor:fpm.Nexthop)
  SharedDtor();
}

void Nexthop::SharedDtor() {
  if (this != default_instance_) {
    delete if_id_;
    delete address_;
  }
}

void Nexthop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Nexthop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nexthop_descriptor_;
}

const Nexthop& Nexthop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fpm_2ffpm_2eproto();
  return *default_instance_;
}

Nexthop* Nexthop::default_instance_ = NULL;

Nexthop* Nexthop::New(::google::protobuf::Arena* arena) const {
  Nexthop* n = new Nexthop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Nexthop::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.Nexthop)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_if_id()) {
      if (if_id_ != NULL) if_id_->::qpb::IfIdentifier::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::qpb::L3Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Nexthop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.Nexthop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qpb.IfIdentifier if_id = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_if_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // optional .qpb.L3Address address = 3;
      case 3: {
        if (tag == 26) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.Nexthop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.Nexthop)
  return false;
#undef DO_
}

void Nexthop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.Nexthop)
  // optional .qpb.IfIdentifier if_id = 2;
  if (has_if_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->if_id_, output);
  }

  // optional .qpb.L3Address address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->address_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.Nexthop)
}

::google::protobuf::uint8* Nexthop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpm.Nexthop)
  // optional .qpb.IfIdentifier if_id = 2;
  if (has_if_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->if_id_, target);
  }

  // optional .qpb.L3Address address = 3;
  if (has_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->address_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.Nexthop)
  return target;
}

int Nexthop::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.Nexthop)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .qpb.IfIdentifier if_id = 2;
    if (has_if_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->if_id_);
    }

    // optional .qpb.L3Address address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->address_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Nexthop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.Nexthop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Nexthop* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Nexthop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.Nexthop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.Nexthop)
    MergeFrom(*source);
  }
}

void Nexthop::MergeFrom(const Nexthop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.Nexthop)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_if_id()) {
      mutable_if_id()->::qpb::IfIdentifier::MergeFrom(from.if_id());
    }
    if (from.has_address()) {
      mutable_address()->::qpb::L3Address::MergeFrom(from.address());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Nexthop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.Nexthop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nexthop::CopyFrom(const Nexthop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.Nexthop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nexthop::IsInitialized() const {

  if (has_address()) {
    if (!this->address_->IsInitialized()) return false;
  }
  return true;
}

void Nexthop::Swap(Nexthop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nexthop::InternalSwap(Nexthop* other) {
  std::swap(if_id_, other->if_id_);
  std::swap(address_, other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Nexthop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Nexthop_descriptor_;
  metadata.reflection = Nexthop_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Nexthop

// optional .qpb.IfIdentifier if_id = 2;
bool Nexthop::has_if_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Nexthop::set_has_if_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Nexthop::clear_has_if_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Nexthop::clear_if_id() {
  if (if_id_ != NULL) if_id_->::qpb::IfIdentifier::Clear();
  clear_has_if_id();
}
const ::qpb::IfIdentifier& Nexthop::if_id() const {
  // @@protoc_insertion_point(field_get:fpm.Nexthop.if_id)
  return if_id_ != NULL ? *if_id_ : *default_instance_->if_id_;
}
::qpb::IfIdentifier* Nexthop::mutable_if_id() {
  set_has_if_id();
  if (if_id_ == NULL) {
    if_id_ = new ::qpb::IfIdentifier;
  }
  // @@protoc_insertion_point(field_mutable:fpm.Nexthop.if_id)
  return if_id_;
}
::qpb::IfIdentifier* Nexthop::release_if_id() {
  // @@protoc_insertion_point(field_release:fpm.Nexthop.if_id)
  clear_has_if_id();
  ::qpb::IfIdentifier* temp = if_id_;
  if_id_ = NULL;
  return temp;
}
void Nexthop::set_allocated_if_id(::qpb::IfIdentifier* if_id) {
  delete if_id_;
  if_id_ = if_id;
  if (if_id) {
    set_has_if_id();
  } else {
    clear_has_if_id();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.Nexthop.if_id)
}

// optional .qpb.L3Address address = 3;
bool Nexthop::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Nexthop::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
void Nexthop::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void Nexthop::clear_address() {
  if (address_ != NULL) address_->::qpb::L3Address::Clear();
  clear_has_address();
}
const ::qpb::L3Address& Nexthop::address() const {
  // @@protoc_insertion_point(field_get:fpm.Nexthop.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
::qpb::L3Address* Nexthop::mutable_address() {
  set_has_address();
  if (address_ == NULL) {
    address_ = new ::qpb::L3Address;
  }
  // @@protoc_insertion_point(field_mutable:fpm.Nexthop.address)
  return address_;
}
::qpb::L3Address* Nexthop::release_address() {
  // @@protoc_insertion_point(field_release:fpm.Nexthop.address)
  clear_has_address();
  ::qpb::L3Address* temp = address_;
  address_ = NULL;
  return temp;
}
void Nexthop::set_allocated_address(::qpb::L3Address* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.Nexthop.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteKey::kPrefixFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteKey::RouteKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.RouteKey)
}

void RouteKey::InitAsDefaultInstance() {
  prefix_ = const_cast< ::qpb::L3Prefix*>(&::qpb::L3Prefix::default_instance());
}

RouteKey::RouteKey(const RouteKey& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fpm.RouteKey)
}

void RouteKey::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteKey::~RouteKey() {
  // @@protoc_insertion_point(destructor:fpm.RouteKey)
  SharedDtor();
}

void RouteKey::SharedDtor() {
  if (this != default_instance_) {
    delete prefix_;
  }
}

void RouteKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteKey_descriptor_;
}

const RouteKey& RouteKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fpm_2ffpm_2eproto();
  return *default_instance_;
}

RouteKey* RouteKey::default_instance_ = NULL;

RouteKey* RouteKey::New(::google::protobuf::Arena* arena) const {
  RouteKey* n = new RouteKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteKey::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.RouteKey)
  if (has_prefix()) {
    if (prefix_ != NULL) prefix_->::qpb::L3Prefix::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RouteKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.RouteKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qpb.L3Prefix prefix = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prefix()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.RouteKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.RouteKey)
  return false;
#undef DO_
}

void RouteKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.RouteKey)
  // optional .qpb.L3Prefix prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->prefix_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.RouteKey)
}

::google::protobuf::uint8* RouteKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpm.RouteKey)
  // optional .qpb.L3Prefix prefix = 1;
  if (has_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->prefix_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.RouteKey)
  return target;
}

int RouteKey::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.RouteKey)
  int total_size = 0;

  // optional .qpb.L3Prefix prefix = 1;
  if (has_prefix()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->prefix_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.RouteKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RouteKey* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouteKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.RouteKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.RouteKey)
    MergeFrom(*source);
  }
}

void RouteKey::MergeFrom(const RouteKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.RouteKey)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      mutable_prefix()->::qpb::L3Prefix::MergeFrom(from.prefix());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RouteKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteKey::CopyFrom(const RouteKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.RouteKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteKey::IsInitialized() const {

  if (has_prefix()) {
    if (!this->prefix_->IsInitialized()) return false;
  }
  return true;
}

void RouteKey::Swap(RouteKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteKey::InternalSwap(RouteKey* other) {
  std::swap(prefix_, other->prefix_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouteKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteKey_descriptor_;
  metadata.reflection = RouteKey_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteKey

// optional .qpb.L3Prefix prefix = 1;
bool RouteKey::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteKey::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteKey::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteKey::clear_prefix() {
  if (prefix_ != NULL) prefix_->::qpb::L3Prefix::Clear();
  clear_has_prefix();
}
const ::qpb::L3Prefix& RouteKey::prefix() const {
  // @@protoc_insertion_point(field_get:fpm.RouteKey.prefix)
  return prefix_ != NULL ? *prefix_ : *default_instance_->prefix_;
}
::qpb::L3Prefix* RouteKey::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == NULL) {
    prefix_ = new ::qpb::L3Prefix;
  }
  // @@protoc_insertion_point(field_mutable:fpm.RouteKey.prefix)
  return prefix_;
}
::qpb::L3Prefix* RouteKey::release_prefix() {
  // @@protoc_insertion_point(field_release:fpm.RouteKey.prefix)
  clear_has_prefix();
  ::qpb::L3Prefix* temp = prefix_;
  prefix_ = NULL;
  return temp;
}
void RouteKey::set_allocated_prefix(::qpb::L3Prefix* prefix) {
  delete prefix_;
  prefix_ = prefix;
  if (prefix) {
    set_has_prefix();
  } else {
    clear_has_prefix();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.RouteKey.prefix)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRoute::kVrfIdFieldNumber;
const int DeleteRoute::kAddressFamilyFieldNumber;
const int DeleteRoute::kSubAddressFamilyFieldNumber;
const int DeleteRoute::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRoute::DeleteRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.DeleteRoute)
}

void DeleteRoute::InitAsDefaultInstance() {
  key_ = const_cast< ::fpm::RouteKey*>(&::fpm::RouteKey::default_instance());
}

DeleteRoute::DeleteRoute(const DeleteRoute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fpm.DeleteRoute)
}

void DeleteRoute::SharedCtor() {
  _cached_size_ = 0;
  vrf_id_ = 0u;
  address_family_ = 0;
  sub_address_family_ = 0;
  key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRoute::~DeleteRoute() {
  // @@protoc_insertion_point(destructor:fpm.DeleteRoute)
  SharedDtor();
}

void DeleteRoute::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void DeleteRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRoute_descriptor_;
}

const DeleteRoute& DeleteRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fpm_2ffpm_2eproto();
  return *default_instance_;
}

DeleteRoute* DeleteRoute::default_instance_ = NULL;

DeleteRoute* DeleteRoute::New(::google::protobuf::Arena* arena) const {
  DeleteRoute* n = new DeleteRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.DeleteRoute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeleteRoute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeleteRoute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(vrf_id_, address_family_);
    sub_address_family_ = 0;
    if (has_key()) {
      if (key_ != NULL) key_->::fpm::RouteKey::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeleteRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.DeleteRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vrf_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrf_id_)));
          set_has_vrf_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_address_family;
        break;
      }

      // required .qpb.AddressFamily address_family = 2;
      case 2: {
        if (tag == 16) {
         parse_address_family:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::AddressFamily_IsValid(value)) {
            set_address_family(static_cast< ::qpb::AddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_address_family;
        break;
      }

      // required .qpb.SubAddressFamily sub_address_family = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_address_family:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::SubAddressFamily_IsValid(value)) {
            set_sub_address_family(static_cast< ::qpb::SubAddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required .fpm.RouteKey key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.DeleteRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.DeleteRoute)
  return false;
#undef DO_
}

void DeleteRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.DeleteRoute)
  // required uint32 vrf_id = 1;
  if (has_vrf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vrf_id(), output);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (has_address_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_family(), output);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (has_sub_address_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sub_address_family(), output);
  }

  // required .fpm.RouteKey key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->key_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.DeleteRoute)
}

::google::protobuf::uint8* DeleteRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpm.DeleteRoute)
  // required uint32 vrf_id = 1;
  if (has_vrf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vrf_id(), target);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (has_address_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_family(), target);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (has_sub_address_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sub_address_family(), target);
  }

  // required .fpm.RouteKey key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->key_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.DeleteRoute)
  return target;
}

int DeleteRoute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fpm.DeleteRoute)
  int total_size = 0;

  if (has_vrf_id()) {
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());
  }

  if (has_address_family()) {
    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());
  }

  if (has_sub_address_family()) {
    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());
  }

  if (has_key()) {
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  return total_size;
}
int DeleteRoute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.DeleteRoute)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());

    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());

    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());

    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.DeleteRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeleteRoute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.DeleteRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.DeleteRoute)
    MergeFrom(*source);
  }
}

void DeleteRoute::MergeFrom(const DeleteRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.DeleteRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vrf_id()) {
      set_vrf_id(from.vrf_id());
    }
    if (from.has_address_family()) {
      set_address_family(from.address_family());
    }
    if (from.has_sub_address_family()) {
      set_sub_address_family(from.sub_address_family());
    }
    if (from.has_key()) {
      mutable_key()->::fpm::RouteKey::MergeFrom(from.key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeleteRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.DeleteRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRoute::CopyFrom(const DeleteRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.DeleteRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  return true;
}

void DeleteRoute::Swap(DeleteRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteRoute::InternalSwap(DeleteRoute* other) {
  std::swap(vrf_id_, other->vrf_id_);
  std::swap(address_family_, other->address_family_);
  std::swap(sub_address_family_, other->sub_address_family_);
  std::swap(key_, other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRoute_descriptor_;
  metadata.reflection = DeleteRoute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteRoute

// required uint32 vrf_id = 1;
bool DeleteRoute::has_vrf_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteRoute::set_has_vrf_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteRoute::clear_has_vrf_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteRoute::clear_vrf_id() {
  vrf_id_ = 0u;
  clear_has_vrf_id();
}
 ::google::protobuf::uint32 DeleteRoute::vrf_id() const {
  // @@protoc_insertion_point(field_get:fpm.DeleteRoute.vrf_id)
  return vrf_id_;
}
 void DeleteRoute::set_vrf_id(::google::protobuf::uint32 value) {
  set_has_vrf_id();
  vrf_id_ = value;
  // @@protoc_insertion_point(field_set:fpm.DeleteRoute.vrf_id)
}

// required .qpb.AddressFamily address_family = 2;
bool DeleteRoute::has_address_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteRoute::set_has_address_family() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteRoute::clear_has_address_family() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteRoute::clear_address_family() {
  address_family_ = 0;
  clear_has_address_family();
}
 ::qpb::AddressFamily DeleteRoute::address_family() const {
  // @@protoc_insertion_point(field_get:fpm.DeleteRoute.address_family)
  return static_cast< ::qpb::AddressFamily >(address_family_);
}
 void DeleteRoute::set_address_family(::qpb::AddressFamily value) {
  assert(::qpb::AddressFamily_IsValid(value));
  set_has_address_family();
  address_family_ = value;
  // @@protoc_insertion_point(field_set:fpm.DeleteRoute.address_family)
}

// required .qpb.SubAddressFamily sub_address_family = 3;
bool DeleteRoute::has_sub_address_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeleteRoute::set_has_sub_address_family() {
  _has_bits_[0] |= 0x00000004u;
}
void DeleteRoute::clear_has_sub_address_family() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeleteRoute::clear_sub_address_family() {
  sub_address_family_ = 0;
  clear_has_sub_address_family();
}
 ::qpb::SubAddressFamily DeleteRoute::sub_address_family() const {
  // @@protoc_insertion_point(field_get:fpm.DeleteRoute.sub_address_family)
  return static_cast< ::qpb::SubAddressFamily >(sub_address_family_);
}
 void DeleteRoute::set_sub_address_family(::qpb::SubAddressFamily value) {
  assert(::qpb::SubAddressFamily_IsValid(value));
  set_has_sub_address_family();
  sub_address_family_ = value;
  // @@protoc_insertion_point(field_set:fpm.DeleteRoute.sub_address_family)
}

// required .fpm.RouteKey key = 4;
bool DeleteRoute::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeleteRoute::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
void DeleteRoute::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeleteRoute::clear_key() {
  if (key_ != NULL) key_->::fpm::RouteKey::Clear();
  clear_has_key();
}
const ::fpm::RouteKey& DeleteRoute::key() const {
  // @@protoc_insertion_point(field_get:fpm.DeleteRoute.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::fpm::RouteKey* DeleteRoute::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::fpm::RouteKey;
  }
  // @@protoc_insertion_point(field_mutable:fpm.DeleteRoute.key)
  return key_;
}
::fpm::RouteKey* DeleteRoute::release_key() {
  // @@protoc_insertion_point(field_release:fpm.DeleteRoute.key)
  clear_has_key();
  ::fpm::RouteKey* temp = key_;
  key_ = NULL;
  return temp;
}
void DeleteRoute::set_allocated_key(::fpm::RouteKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.DeleteRoute.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRoute::kVrfIdFieldNumber;
const int AddRoute::kAddressFamilyFieldNumber;
const int AddRoute::kSubAddressFamilyFieldNumber;
const int AddRoute::kKeyFieldNumber;
const int AddRoute::kRouteTypeFieldNumber;
const int AddRoute::kProtocolFieldNumber;
const int AddRoute::kMetricFieldNumber;
const int AddRoute::kNexthopsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRoute::AddRoute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.AddRoute)
}

void AddRoute::InitAsDefaultInstance() {
  key_ = const_cast< ::fpm::RouteKey*>(&::fpm::RouteKey::default_instance());
}

AddRoute::AddRoute(const AddRoute& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fpm.AddRoute)
}

void AddRoute::SharedCtor() {
  _cached_size_ = 0;
  vrf_id_ = 0u;
  address_family_ = 0;
  sub_address_family_ = 0;
  key_ = NULL;
  route_type_ = 0;
  protocol_ = 0;
  metric_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRoute::~AddRoute() {
  // @@protoc_insertion_point(destructor:fpm.AddRoute)
  SharedDtor();
}

void AddRoute::SharedDtor() {
  if (this != default_instance_) {
    delete key_;
  }
}

void AddRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRoute_descriptor_;
}

const AddRoute& AddRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fpm_2ffpm_2eproto();
  return *default_instance_;
}

AddRoute* AddRoute::default_instance_ = NULL;

AddRoute* AddRoute::New(::google::protobuf::Arena* arena) const {
  AddRoute* n = new AddRoute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.AddRoute)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddRoute, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddRoute*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(vrf_id_, address_family_);
    ZR_(sub_address_family_, metric_);
    if (has_key()) {
      if (key_ != NULL) key_->::fpm::RouteKey::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  nexthops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.AddRoute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 vrf_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vrf_id_)));
          set_has_vrf_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_address_family;
        break;
      }

      // required .qpb.AddressFamily address_family = 2;
      case 2: {
        if (tag == 16) {
         parse_address_family:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::AddressFamily_IsValid(value)) {
            set_address_family(static_cast< ::qpb::AddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_address_family;
        break;
      }

      // required .qpb.SubAddressFamily sub_address_family = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_address_family:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::SubAddressFamily_IsValid(value)) {
            set_sub_address_family(static_cast< ::qpb::SubAddressFamily >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // required .fpm.RouteKey key = 4;
      case 4: {
        if (tag == 34) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_route_type;
        break;
      }

      // optional .fpm.RouteType route_type = 5;
      case 5: {
        if (tag == 40) {
         parse_route_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fpm::RouteType_IsValid(value)) {
            set_route_type(static_cast< ::fpm::RouteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_protocol;
        break;
      }

      // required .qpb.Protocol protocol = 6;
      case 6: {
        if (tag == 48) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::qpb::Protocol_IsValid(value)) {
            set_protocol(static_cast< ::qpb::Protocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_metric;
        break;
      }

      // required int32 metric = 8;
      case 8: {
        if (tag == 64) {
         parse_metric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &metric_)));
          set_has_metric();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_nexthops;
        break;
      }

      // repeated .fpm.Nexthop nexthops = 9;
      case 9: {
        if (tag == 74) {
         parse_nexthops:
          DO_(input->IncrementRecursionDepth());
         parse_loop_nexthops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nexthops()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_nexthops;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.AddRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.AddRoute)
  return false;
#undef DO_
}

void AddRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.AddRoute)
  // required uint32 vrf_id = 1;
  if (has_vrf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vrf_id(), output);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (has_address_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->address_family(), output);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (has_sub_address_family()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sub_address_family(), output);
  }

  // required .fpm.RouteKey key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->key_, output);
  }

  // optional .fpm.RouteType route_type = 5;
  if (has_route_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->route_type(), output);
  }

  // required .qpb.Protocol protocol = 6;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->protocol(), output);
  }

  // required int32 metric = 8;
  if (has_metric()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->metric(), output);
  }

  // repeated .fpm.Nexthop nexthops = 9;
  for (unsigned int i = 0, n = this->nexthops_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nexthops(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.AddRoute)
}

::google::protobuf::uint8* AddRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpm.AddRoute)
  // required uint32 vrf_id = 1;
  if (has_vrf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->vrf_id(), target);
  }

  // required .qpb.AddressFamily address_family = 2;
  if (has_address_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->address_family(), target);
  }

  // required .qpb.SubAddressFamily sub_address_family = 3;
  if (has_sub_address_family()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sub_address_family(), target);
  }

  // required .fpm.RouteKey key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->key_, target);
  }

  // optional .fpm.RouteType route_type = 5;
  if (has_route_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->route_type(), target);
  }

  // required .qpb.Protocol protocol = 6;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->protocol(), target);
  }

  // required int32 metric = 8;
  if (has_metric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->metric(), target);
  }

  // repeated .fpm.Nexthop nexthops = 9;
  for (unsigned int i = 0, n = this->nexthops_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->nexthops(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.AddRoute)
  return target;
}

int AddRoute::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fpm.AddRoute)
  int total_size = 0;

  if (has_vrf_id()) {
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());
  }

  if (has_address_family()) {
    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());
  }

  if (has_sub_address_family()) {
    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());
  }

  if (has_key()) {
    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  if (has_protocol()) {
    // required .qpb.Protocol protocol = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
  }

  if (has_metric()) {
    // required int32 metric = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->metric());
  }

  return total_size;
}
int AddRoute::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.AddRoute)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000006f) ^ 0x0000006f) == 0) {  // All required fields are present.
    // required uint32 vrf_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vrf_id());

    // required .qpb.AddressFamily address_family = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->address_family());

    // required .qpb.SubAddressFamily sub_address_family = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_address_family());

    // required .fpm.RouteKey key = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);

    // required .qpb.Protocol protocol = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());

    // required int32 metric = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->metric());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .fpm.RouteType route_type = 5;
  if (has_route_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->route_type());
  }

  // repeated .fpm.Nexthop nexthops = 9;
  total_size += 1 * this->nexthops_size();
  for (int i = 0; i < this->nexthops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nexthops(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRoute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.AddRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddRoute* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddRoute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.AddRoute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.AddRoute)
    MergeFrom(*source);
  }
}

void AddRoute::MergeFrom(const AddRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.AddRoute)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  nexthops_.MergeFrom(from.nexthops_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vrf_id()) {
      set_vrf_id(from.vrf_id());
    }
    if (from.has_address_family()) {
      set_address_family(from.address_family());
    }
    if (from.has_sub_address_family()) {
      set_sub_address_family(from.sub_address_family());
    }
    if (from.has_key()) {
      mutable_key()->::fpm::RouteKey::MergeFrom(from.key());
    }
    if (from.has_route_type()) {
      set_route_type(from.route_type());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_metric()) {
      set_metric(from.metric());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddRoute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.AddRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRoute::CopyFrom(const AddRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.AddRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006f) != 0x0000006f) return false;

  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->nexthops())) return false;
  return true;
}

void AddRoute::Swap(AddRoute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRoute::InternalSwap(AddRoute* other) {
  std::swap(vrf_id_, other->vrf_id_);
  std::swap(address_family_, other->address_family_);
  std::swap(sub_address_family_, other->sub_address_family_);
  std::swap(key_, other->key_);
  std::swap(route_type_, other->route_type_);
  std::swap(protocol_, other->protocol_);
  std::swap(metric_, other->metric_);
  nexthops_.UnsafeArenaSwap(&other->nexthops_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRoute_descriptor_;
  metadata.reflection = AddRoute_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddRoute

// required uint32 vrf_id = 1;
bool AddRoute::has_vrf_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddRoute::set_has_vrf_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AddRoute::clear_has_vrf_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddRoute::clear_vrf_id() {
  vrf_id_ = 0u;
  clear_has_vrf_id();
}
 ::google::protobuf::uint32 AddRoute::vrf_id() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.vrf_id)
  return vrf_id_;
}
 void AddRoute::set_vrf_id(::google::protobuf::uint32 value) {
  set_has_vrf_id();
  vrf_id_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.vrf_id)
}

// required .qpb.AddressFamily address_family = 2;
bool AddRoute::has_address_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddRoute::set_has_address_family() {
  _has_bits_[0] |= 0x00000002u;
}
void AddRoute::clear_has_address_family() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddRoute::clear_address_family() {
  address_family_ = 0;
  clear_has_address_family();
}
 ::qpb::AddressFamily AddRoute::address_family() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.address_family)
  return static_cast< ::qpb::AddressFamily >(address_family_);
}
 void AddRoute::set_address_family(::qpb::AddressFamily value) {
  assert(::qpb::AddressFamily_IsValid(value));
  set_has_address_family();
  address_family_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.address_family)
}

// required .qpb.SubAddressFamily sub_address_family = 3;
bool AddRoute::has_sub_address_family() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddRoute::set_has_sub_address_family() {
  _has_bits_[0] |= 0x00000004u;
}
void AddRoute::clear_has_sub_address_family() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddRoute::clear_sub_address_family() {
  sub_address_family_ = 0;
  clear_has_sub_address_family();
}
 ::qpb::SubAddressFamily AddRoute::sub_address_family() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.sub_address_family)
  return static_cast< ::qpb::SubAddressFamily >(sub_address_family_);
}
 void AddRoute::set_sub_address_family(::qpb::SubAddressFamily value) {
  assert(::qpb::SubAddressFamily_IsValid(value));
  set_has_sub_address_family();
  sub_address_family_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.sub_address_family)
}

// required .fpm.RouteKey key = 4;
bool AddRoute::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddRoute::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
void AddRoute::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddRoute::clear_key() {
  if (key_ != NULL) key_->::fpm::RouteKey::Clear();
  clear_has_key();
}
const ::fpm::RouteKey& AddRoute::key() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.key)
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
::fpm::RouteKey* AddRoute::mutable_key() {
  set_has_key();
  if (key_ == NULL) {
    key_ = new ::fpm::RouteKey;
  }
  // @@protoc_insertion_point(field_mutable:fpm.AddRoute.key)
  return key_;
}
::fpm::RouteKey* AddRoute::release_key() {
  // @@protoc_insertion_point(field_release:fpm.AddRoute.key)
  clear_has_key();
  ::fpm::RouteKey* temp = key_;
  key_ = NULL;
  return temp;
}
void AddRoute::set_allocated_key(::fpm::RouteKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.AddRoute.key)
}

// optional .fpm.RouteType route_type = 5;
bool AddRoute::has_route_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddRoute::set_has_route_type() {
  _has_bits_[0] |= 0x00000010u;
}
void AddRoute::clear_has_route_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddRoute::clear_route_type() {
  route_type_ = 0;
  clear_has_route_type();
}
 ::fpm::RouteType AddRoute::route_type() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.route_type)
  return static_cast< ::fpm::RouteType >(route_type_);
}
 void AddRoute::set_route_type(::fpm::RouteType value) {
  assert(::fpm::RouteType_IsValid(value));
  set_has_route_type();
  route_type_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.route_type)
}

// required .qpb.Protocol protocol = 6;
bool AddRoute::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AddRoute::set_has_protocol() {
  _has_bits_[0] |= 0x00000020u;
}
void AddRoute::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000020u;
}
void AddRoute::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
 ::qpb::Protocol AddRoute::protocol() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.protocol)
  return static_cast< ::qpb::Protocol >(protocol_);
}
 void AddRoute::set_protocol(::qpb::Protocol value) {
  assert(::qpb::Protocol_IsValid(value));
  set_has_protocol();
  protocol_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.protocol)
}

// required int32 metric = 8;
bool AddRoute::has_metric() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AddRoute::set_has_metric() {
  _has_bits_[0] |= 0x00000040u;
}
void AddRoute::clear_has_metric() {
  _has_bits_[0] &= ~0x00000040u;
}
void AddRoute::clear_metric() {
  metric_ = 0;
  clear_has_metric();
}
 ::google::protobuf::int32 AddRoute::metric() const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.metric)
  return metric_;
}
 void AddRoute::set_metric(::google::protobuf::int32 value) {
  set_has_metric();
  metric_ = value;
  // @@protoc_insertion_point(field_set:fpm.AddRoute.metric)
}

// repeated .fpm.Nexthop nexthops = 9;
int AddRoute::nexthops_size() const {
  return nexthops_.size();
}
void AddRoute::clear_nexthops() {
  nexthops_.Clear();
}
const ::fpm::Nexthop& AddRoute::nexthops(int index) const {
  // @@protoc_insertion_point(field_get:fpm.AddRoute.nexthops)
  return nexthops_.Get(index);
}
::fpm::Nexthop* AddRoute::mutable_nexthops(int index) {
  // @@protoc_insertion_point(field_mutable:fpm.AddRoute.nexthops)
  return nexthops_.Mutable(index);
}
::fpm::Nexthop* AddRoute::add_nexthops() {
  // @@protoc_insertion_point(field_add:fpm.AddRoute.nexthops)
  return nexthops_.Add();
}
::google::protobuf::RepeatedPtrField< ::fpm::Nexthop >*
AddRoute::mutable_nexthops() {
  // @@protoc_insertion_point(field_mutable_list:fpm.AddRoute.nexthops)
  return &nexthops_;
}
const ::google::protobuf::RepeatedPtrField< ::fpm::Nexthop >&
AddRoute::nexthops() const {
  // @@protoc_insertion_point(field_list:fpm.AddRoute.nexthops)
  return nexthops_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_Type Message::UNKNOWN_MSG;
const Message_Type Message::ADD_ROUTE;
const Message_Type Message::DELETE_ROUTE;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kAddRouteFieldNumber;
const int Message::kDeleteRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fpm.Message)
}

void Message::InitAsDefaultInstance() {
  add_route_ = const_cast< ::fpm::AddRoute*>(&::fpm::AddRoute::default_instance());
  delete_route_ = const_cast< ::fpm::DeleteRoute*>(&::fpm::DeleteRoute::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fpm.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  add_route_ = NULL;
  delete_route_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:fpm.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete add_route_;
    delete delete_route_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fpm_2ffpm_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:fpm.Message)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 0;
    if (has_add_route()) {
      if (add_route_ != NULL) add_route_->::fpm::AddRoute::Clear();
    }
    if (has_delete_route()) {
      if (delete_route_ != NULL) delete_route_->::fpm::DeleteRoute::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fpm.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fpm.Message.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fpm::Message_Type_IsValid(value)) {
            set_type(static_cast< ::fpm::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_add_route;
        break;
      }

      // optional .fpm.AddRoute add_route = 2;
      case 2: {
        if (tag == 18) {
         parse_add_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_delete_route;
        break;
      }

      // optional .fpm.DeleteRoute delete_route = 3;
      case 3: {
        if (tag == 26) {
         parse_delete_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delete_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fpm.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fpm.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fpm.Message)
  // optional .fpm.Message.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .fpm.AddRoute add_route = 2;
  if (has_add_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->add_route_, output);
  }

  // optional .fpm.DeleteRoute delete_route = 3;
  if (has_delete_route()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->delete_route_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fpm.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpm.Message)
  // optional .fpm.Message.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .fpm.AddRoute add_route = 2;
  if (has_add_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->add_route_, target);
  }

  // optional .fpm.DeleteRoute delete_route = 3;
  if (has_delete_route()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->delete_route_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpm.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fpm.Message)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .fpm.Message.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .fpm.AddRoute add_route = 2;
    if (has_add_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_route_);
    }

    // optional .fpm.DeleteRoute delete_route = 3;
    if (has_delete_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->delete_route_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpm.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpm.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpm.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpm.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_add_route()) {
      mutable_add_route()->::fpm::AddRoute::MergeFrom(from.add_route());
    }
    if (from.has_delete_route()) {
      mutable_delete_route()->::fpm::DeleteRoute::MergeFrom(from.delete_route());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpm.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpm.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  if (has_add_route()) {
    if (!this->add_route_->IsInitialized()) return false;
  }
  if (has_delete_route()) {
    if (!this->delete_route_->IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  std::swap(add_route_, other->add_route_);
  std::swap(delete_route_, other->delete_route_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .fpm.Message.Type type = 1;
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::fpm::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:fpm.Message.type)
  return static_cast< ::fpm::Message_Type >(type_);
}
 void Message::set_type(::fpm::Message_Type value) {
  assert(::fpm::Message_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fpm.Message.type)
}

// optional .fpm.AddRoute add_route = 2;
bool Message::has_add_route() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Message::set_has_add_route() {
  _has_bits_[0] |= 0x00000002u;
}
void Message::clear_has_add_route() {
  _has_bits_[0] &= ~0x00000002u;
}
void Message::clear_add_route() {
  if (add_route_ != NULL) add_route_->::fpm::AddRoute::Clear();
  clear_has_add_route();
}
const ::fpm::AddRoute& Message::add_route() const {
  // @@protoc_insertion_point(field_get:fpm.Message.add_route)
  return add_route_ != NULL ? *add_route_ : *default_instance_->add_route_;
}
::fpm::AddRoute* Message::mutable_add_route() {
  set_has_add_route();
  if (add_route_ == NULL) {
    add_route_ = new ::fpm::AddRoute;
  }
  // @@protoc_insertion_point(field_mutable:fpm.Message.add_route)
  return add_route_;
}
::fpm::AddRoute* Message::release_add_route() {
  // @@protoc_insertion_point(field_release:fpm.Message.add_route)
  clear_has_add_route();
  ::fpm::AddRoute* temp = add_route_;
  add_route_ = NULL;
  return temp;
}
void Message::set_allocated_add_route(::fpm::AddRoute* add_route) {
  delete add_route_;
  add_route_ = add_route;
  if (add_route) {
    set_has_add_route();
  } else {
    clear_has_add_route();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.Message.add_route)
}

// optional .fpm.DeleteRoute delete_route = 3;
bool Message::has_delete_route() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_delete_route() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_delete_route() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_delete_route() {
  if (delete_route_ != NULL) delete_route_->::fpm::DeleteRoute::Clear();
  clear_has_delete_route();
}
const ::fpm::DeleteRoute& Message::delete_route() const {
  // @@protoc_insertion_point(field_get:fpm.Message.delete_route)
  return delete_route_ != NULL ? *delete_route_ : *default_instance_->delete_route_;
}
::fpm::DeleteRoute* Message::mutable_delete_route() {
  set_has_delete_route();
  if (delete_route_ == NULL) {
    delete_route_ = new ::fpm::DeleteRoute;
  }
  // @@protoc_insertion_point(field_mutable:fpm.Message.delete_route)
  return delete_route_;
}
::fpm::DeleteRoute* Message::release_delete_route() {
  // @@protoc_insertion_point(field_release:fpm.Message.delete_route)
  clear_has_delete_route();
  ::fpm::DeleteRoute* temp = delete_route_;
  delete_route_ = NULL;
  return temp;
}
void Message::set_allocated_delete_route(::fpm::DeleteRoute* delete_route) {
  delete delete_route_;
  delete_route_ = delete_route;
  if (delete_route) {
    set_has_delete_route();
  } else {
    clear_has_delete_route();
  }
  // @@protoc_insertion_point(field_set_allocated:fpm.Message.delete_route)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fpm

// @@protoc_insertion_point(global_scope)
