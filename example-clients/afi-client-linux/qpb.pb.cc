// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qpb/qpb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qpb/qpb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qpb {

namespace {

const ::google::protobuf::Descriptor* Ipv4Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ipv4Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ipv6Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ipv6Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* L3Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L3Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* L3Prefix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L3Prefix_reflection_ = NULL;
const ::google::protobuf::Descriptor* IfIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IfIdentifier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AddressFamily_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubAddressFamily_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Protocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_qpb_2fqpb_2eproto() {
  protobuf_AddDesc_qpb_2fqpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qpb/qpb.proto");
  GOOGLE_CHECK(file != NULL);
  Ipv4Address_descriptor_ = file->message_type(0);
  static const int Ipv4Address_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv4Address, value_),
  };
  Ipv4Address_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ipv4Address_descriptor_,
      Ipv4Address::default_instance_,
      Ipv4Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv4Address, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ipv4Address),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv4Address, _internal_metadata_),
      -1);
  Ipv6Address_descriptor_ = file->message_type(1);
  static const int Ipv6Address_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv6Address, bytes_),
  };
  Ipv6Address_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ipv6Address_descriptor_,
      Ipv6Address::default_instance_,
      Ipv6Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv6Address, _has_bits_[0]),
      -1,
      -1,
      sizeof(Ipv6Address),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipv6Address, _internal_metadata_),
      -1);
  L3Address_descriptor_ = file->message_type(2);
  static const int L3Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Address, v4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Address, v6_),
  };
  L3Address_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      L3Address_descriptor_,
      L3Address::default_instance_,
      L3Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Address, _has_bits_[0]),
      -1,
      -1,
      sizeof(L3Address),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Address, _internal_metadata_),
      -1);
  L3Prefix_descriptor_ = file->message_type(3);
  static const int L3Prefix_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Prefix, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Prefix, bytes_),
  };
  L3Prefix_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      L3Prefix_descriptor_,
      L3Prefix::default_instance_,
      L3Prefix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Prefix, _has_bits_[0]),
      -1,
      -1,
      sizeof(L3Prefix),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L3Prefix, _internal_metadata_),
      -1);
  IfIdentifier_descriptor_ = file->message_type(4);
  static const int IfIdentifier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfIdentifier, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfIdentifier, name_),
  };
  IfIdentifier_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IfIdentifier_descriptor_,
      IfIdentifier::default_instance_,
      IfIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfIdentifier, _has_bits_[0]),
      -1,
      -1,
      sizeof(IfIdentifier),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IfIdentifier, _internal_metadata_),
      -1);
  AddressFamily_descriptor_ = file->enum_type(0);
  SubAddressFamily_descriptor_ = file->enum_type(1);
  Protocol_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qpb_2fqpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ipv4Address_descriptor_, &Ipv4Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ipv6Address_descriptor_, &Ipv6Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      L3Address_descriptor_, &L3Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      L3Prefix_descriptor_, &L3Prefix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IfIdentifier_descriptor_, &IfIdentifier::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qpb_2fqpb_2eproto() {
  delete Ipv4Address::default_instance_;
  delete Ipv4Address_reflection_;
  delete Ipv6Address::default_instance_;
  delete Ipv6Address_reflection_;
  delete L3Address::default_instance_;
  delete L3Address_reflection_;
  delete L3Prefix::default_instance_;
  delete L3Prefix_reflection_;
  delete IfIdentifier::default_instance_;
  delete IfIdentifier_reflection_;
}

void protobuf_AddDesc_qpb_2fqpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rqpb/qpb.proto\022\003qpb\"\034\n\013Ipv4Address\022\r\n\005v"
    "alue\030\001 \002(\007\"\034\n\013Ipv6Address\022\r\n\005bytes\030\001 \002(\014"
    "\"G\n\tL3Address\022\034\n\002v4\030\001 \001(\0132\020.qpb.Ipv4Addr"
    "ess\022\034\n\002v6\030\002 \001(\0132\020.qpb.Ipv6Address\")\n\010L3P"
    "refix\022\016\n\006length\030\001 \002(\r\022\r\n\005bytes\030\002 \002(\014\"+\n\014"
    "IfIdentifier\022\r\n\005index\030\001 \001(\r\022\014\n\004name\030\002 \001("
    "\t*3\n\rAddressFamily\022\016\n\nUNKNOWN_AF\020\000\022\010\n\004IP"
    "V4\020\001\022\010\n\004IPV6\020\002*\?\n\020SubAddressFamily\022\017\n\013UN"
    "KNOWN_SAF\020\000\022\013\n\007UNICAST\020\001\022\r\n\tMULTICAST\020\002*"
    "\213\001\n\010Protocol\022\021\n\rUNKNOWN_PROTO\020\000\022\t\n\005LOCAL"
    "\020\001\022\r\n\tCONNECTED\020\002\022\n\n\006KERNEL\020\003\022\n\n\006STATIC\020"
    "\004\022\007\n\003RIP\020\005\022\t\n\005RIPNG\020\006\022\010\n\004OSPF\020\007\022\010\n\004ISIS\020"
    "\010\022\007\n\003BGP\020\t\022\t\n\005OTHER\020\n", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qpb/qpb.proto", &protobuf_RegisterTypes);
  Ipv4Address::default_instance_ = new Ipv4Address();
  Ipv6Address::default_instance_ = new Ipv6Address();
  L3Address::default_instance_ = new L3Address();
  L3Prefix::default_instance_ = new L3Prefix();
  IfIdentifier::default_instance_ = new IfIdentifier();
  Ipv4Address::default_instance_->InitAsDefaultInstance();
  Ipv6Address::default_instance_->InitAsDefaultInstance();
  L3Address::default_instance_->InitAsDefaultInstance();
  L3Prefix::default_instance_->InitAsDefaultInstance();
  IfIdentifier::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qpb_2fqpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qpb_2fqpb_2eproto {
  StaticDescriptorInitializer_qpb_2fqpb_2eproto() {
    protobuf_AddDesc_qpb_2fqpb_2eproto();
  }
} static_descriptor_initializer_qpb_2fqpb_2eproto_;
const ::google::protobuf::EnumDescriptor* AddressFamily_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressFamily_descriptor_;
}
bool AddressFamily_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubAddressFamily_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubAddressFamily_descriptor_;
}
bool SubAddressFamily_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Protocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protocol_descriptor_;
}
bool Protocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipv4Address::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipv4Address::Ipv4Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qpb.Ipv4Address)
}

void Ipv4Address::InitAsDefaultInstance() {
}

Ipv4Address::Ipv4Address(const Ipv4Address& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qpb.Ipv4Address)
}

void Ipv4Address::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ipv4Address::~Ipv4Address() {
  // @@protoc_insertion_point(destructor:qpb.Ipv4Address)
  SharedDtor();
}

void Ipv4Address::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Ipv4Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipv4Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ipv4Address_descriptor_;
}

const Ipv4Address& Ipv4Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpb_2fqpb_2eproto();
  return *default_instance_;
}

Ipv4Address* Ipv4Address::default_instance_ = NULL;

Ipv4Address* Ipv4Address::New(::google::protobuf::Arena* arena) const {
  Ipv4Address* n = new Ipv4Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipv4Address::Clear() {
// @@protoc_insertion_point(message_clear_start:qpb.Ipv4Address)
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ipv4Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qpb.Ipv4Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qpb.Ipv4Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qpb.Ipv4Address)
  return false;
#undef DO_
}

void Ipv4Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qpb.Ipv4Address)
  // required fixed32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qpb.Ipv4Address)
}

::google::protobuf::uint8* Ipv4Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qpb.Ipv4Address)
  // required fixed32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qpb.Ipv4Address)
  return target;
}

int Ipv4Address::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:qpb.Ipv4Address)
  int total_size = 0;

  // required fixed32 value = 1;
  if (has_value()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipv4Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qpb.Ipv4Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ipv4Address* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipv4Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qpb.Ipv4Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qpb.Ipv4Address)
    MergeFrom(*source);
  }
}

void Ipv4Address::MergeFrom(const Ipv4Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qpb.Ipv4Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ipv4Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qpb.Ipv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipv4Address::CopyFrom(const Ipv4Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qpb.Ipv4Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipv4Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ipv4Address::Swap(Ipv4Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipv4Address::InternalSwap(Ipv4Address* other) {
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipv4Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ipv4Address_descriptor_;
  metadata.reflection = Ipv4Address_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ipv4Address

// required fixed32 value = 1;
bool Ipv4Address::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ipv4Address::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void Ipv4Address::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ipv4Address::clear_value() {
  value_ = 0u;
  clear_has_value();
}
 ::google::protobuf::uint32 Ipv4Address::value() const {
  // @@protoc_insertion_point(field_get:qpb.Ipv4Address.value)
  return value_;
}
 void Ipv4Address::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:qpb.Ipv4Address.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipv6Address::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipv6Address::Ipv6Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qpb.Ipv6Address)
}

void Ipv6Address::InitAsDefaultInstance() {
}

Ipv6Address::Ipv6Address(const Ipv6Address& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qpb.Ipv6Address)
}

void Ipv6Address::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ipv6Address::~Ipv6Address() {
  // @@protoc_insertion_point(destructor:qpb.Ipv6Address)
  SharedDtor();
}

void Ipv6Address::SharedDtor() {
  bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Ipv6Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipv6Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ipv6Address_descriptor_;
}

const Ipv6Address& Ipv6Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpb_2fqpb_2eproto();
  return *default_instance_;
}

Ipv6Address* Ipv6Address::default_instance_ = NULL;

Ipv6Address* Ipv6Address::New(::google::protobuf::Arena* arena) const {
  Ipv6Address* n = new Ipv6Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipv6Address::Clear() {
// @@protoc_insertion_point(message_clear_start:qpb.Ipv6Address)
  if (has_bytes()) {
    bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Ipv6Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qpb.Ipv6Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qpb.Ipv6Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qpb.Ipv6Address)
  return false;
#undef DO_
}

void Ipv6Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qpb.Ipv6Address)
  // required bytes bytes = 1;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qpb.Ipv6Address)
}

::google::protobuf::uint8* Ipv6Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qpb.Ipv6Address)
  // required bytes bytes = 1;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qpb.Ipv6Address)
  return target;
}

int Ipv6Address::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:qpb.Ipv6Address)
  int total_size = 0;

  // required bytes bytes = 1;
  if (has_bytes()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipv6Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qpb.Ipv6Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ipv6Address* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipv6Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qpb.Ipv6Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qpb.Ipv6Address)
    MergeFrom(*source);
  }
}

void Ipv6Address::MergeFrom(const Ipv6Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qpb.Ipv6Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes()) {
      set_has_bytes();
      bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Ipv6Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qpb.Ipv6Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipv6Address::CopyFrom(const Ipv6Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qpb.Ipv6Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipv6Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Ipv6Address::Swap(Ipv6Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipv6Address::InternalSwap(Ipv6Address* other) {
  bytes_.Swap(&other->bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipv6Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ipv6Address_descriptor_;
  metadata.reflection = Ipv6Address_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ipv6Address

// required bytes bytes = 1;
bool Ipv6Address::has_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ipv6Address::set_has_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void Ipv6Address::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ipv6Address::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes();
}
 const ::std::string& Ipv6Address::bytes() const {
  // @@protoc_insertion_point(field_get:qpb.Ipv6Address.bytes)
  return bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ipv6Address::set_bytes(const ::std::string& value) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qpb.Ipv6Address.bytes)
}
 void Ipv6Address::set_bytes(const char* value) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qpb.Ipv6Address.bytes)
}
 void Ipv6Address::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qpb.Ipv6Address.bytes)
}
 ::std::string* Ipv6Address::mutable_bytes() {
  set_has_bytes();
  // @@protoc_insertion_point(field_mutable:qpb.Ipv6Address.bytes)
  return bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ipv6Address::release_bytes() {
  // @@protoc_insertion_point(field_release:qpb.Ipv6Address.bytes)
  clear_has_bytes();
  return bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ipv6Address::set_allocated_bytes(::std::string* bytes) {
  if (bytes != NULL) {
    set_has_bytes();
  } else {
    clear_has_bytes();
  }
  bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:qpb.Ipv6Address.bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int L3Address::kV4FieldNumber;
const int L3Address::kV6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

L3Address::L3Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qpb.L3Address)
}

void L3Address::InitAsDefaultInstance() {
  v4_ = const_cast< ::qpb::Ipv4Address*>(&::qpb::Ipv4Address::default_instance());
  v6_ = const_cast< ::qpb::Ipv6Address*>(&::qpb::Ipv6Address::default_instance());
}

L3Address::L3Address(const L3Address& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qpb.L3Address)
}

void L3Address::SharedCtor() {
  _cached_size_ = 0;
  v4_ = NULL;
  v6_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L3Address::~L3Address() {
  // @@protoc_insertion_point(destructor:qpb.L3Address)
  SharedDtor();
}

void L3Address::SharedDtor() {
  if (this != default_instance_) {
    delete v4_;
    delete v6_;
  }
}

void L3Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L3Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L3Address_descriptor_;
}

const L3Address& L3Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpb_2fqpb_2eproto();
  return *default_instance_;
}

L3Address* L3Address::default_instance_ = NULL;

L3Address* L3Address::New(::google::protobuf::Arena* arena) const {
  L3Address* n = new L3Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void L3Address::Clear() {
// @@protoc_insertion_point(message_clear_start:qpb.L3Address)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_v4()) {
      if (v4_ != NULL) v4_->::qpb::Ipv4Address::Clear();
    }
    if (has_v6()) {
      if (v6_ != NULL) v6_->::qpb::Ipv6Address::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool L3Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qpb.L3Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .qpb.Ipv4Address v4 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_v6;
        break;
      }

      // optional .qpb.Ipv6Address v6 = 2;
      case 2: {
        if (tag == 18) {
         parse_v6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v6()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qpb.L3Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qpb.L3Address)
  return false;
#undef DO_
}

void L3Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qpb.L3Address)
  // optional .qpb.Ipv4Address v4 = 1;
  if (has_v4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->v4_, output);
  }

  // optional .qpb.Ipv6Address v6 = 2;
  if (has_v6()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->v6_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qpb.L3Address)
}

::google::protobuf::uint8* L3Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qpb.L3Address)
  // optional .qpb.Ipv4Address v4 = 1;
  if (has_v4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->v4_, target);
  }

  // optional .qpb.Ipv6Address v6 = 2;
  if (has_v6()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->v6_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qpb.L3Address)
  return target;
}

int L3Address::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:qpb.L3Address)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .qpb.Ipv4Address v4 = 1;
    if (has_v4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v4_);
    }

    // optional .qpb.Ipv6Address v6 = 2;
    if (has_v6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->v6_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L3Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qpb.L3Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const L3Address* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const L3Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qpb.L3Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qpb.L3Address)
    MergeFrom(*source);
  }
}

void L3Address::MergeFrom(const L3Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qpb.L3Address)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_v4()) {
      mutable_v4()->::qpb::Ipv4Address::MergeFrom(from.v4());
    }
    if (from.has_v6()) {
      mutable_v6()->::qpb::Ipv6Address::MergeFrom(from.v6());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void L3Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qpb.L3Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L3Address::CopyFrom(const L3Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qpb.L3Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L3Address::IsInitialized() const {

  if (has_v4()) {
    if (!this->v4_->IsInitialized()) return false;
  }
  if (has_v6()) {
    if (!this->v6_->IsInitialized()) return false;
  }
  return true;
}

void L3Address::Swap(L3Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void L3Address::InternalSwap(L3Address* other) {
  std::swap(v4_, other->v4_);
  std::swap(v6_, other->v6_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata L3Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L3Address_descriptor_;
  metadata.reflection = L3Address_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// L3Address

// optional .qpb.Ipv4Address v4 = 1;
bool L3Address::has_v4() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void L3Address::set_has_v4() {
  _has_bits_[0] |= 0x00000001u;
}
void L3Address::clear_has_v4() {
  _has_bits_[0] &= ~0x00000001u;
}
void L3Address::clear_v4() {
  if (v4_ != NULL) v4_->::qpb::Ipv4Address::Clear();
  clear_has_v4();
}
const ::qpb::Ipv4Address& L3Address::v4() const {
  // @@protoc_insertion_point(field_get:qpb.L3Address.v4)
  return v4_ != NULL ? *v4_ : *default_instance_->v4_;
}
::qpb::Ipv4Address* L3Address::mutable_v4() {
  set_has_v4();
  if (v4_ == NULL) {
    v4_ = new ::qpb::Ipv4Address;
  }
  // @@protoc_insertion_point(field_mutable:qpb.L3Address.v4)
  return v4_;
}
::qpb::Ipv4Address* L3Address::release_v4() {
  // @@protoc_insertion_point(field_release:qpb.L3Address.v4)
  clear_has_v4();
  ::qpb::Ipv4Address* temp = v4_;
  v4_ = NULL;
  return temp;
}
void L3Address::set_allocated_v4(::qpb::Ipv4Address* v4) {
  delete v4_;
  v4_ = v4;
  if (v4) {
    set_has_v4();
  } else {
    clear_has_v4();
  }
  // @@protoc_insertion_point(field_set_allocated:qpb.L3Address.v4)
}

// optional .qpb.Ipv6Address v6 = 2;
bool L3Address::has_v6() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void L3Address::set_has_v6() {
  _has_bits_[0] |= 0x00000002u;
}
void L3Address::clear_has_v6() {
  _has_bits_[0] &= ~0x00000002u;
}
void L3Address::clear_v6() {
  if (v6_ != NULL) v6_->::qpb::Ipv6Address::Clear();
  clear_has_v6();
}
const ::qpb::Ipv6Address& L3Address::v6() const {
  // @@protoc_insertion_point(field_get:qpb.L3Address.v6)
  return v6_ != NULL ? *v6_ : *default_instance_->v6_;
}
::qpb::Ipv6Address* L3Address::mutable_v6() {
  set_has_v6();
  if (v6_ == NULL) {
    v6_ = new ::qpb::Ipv6Address;
  }
  // @@protoc_insertion_point(field_mutable:qpb.L3Address.v6)
  return v6_;
}
::qpb::Ipv6Address* L3Address::release_v6() {
  // @@protoc_insertion_point(field_release:qpb.L3Address.v6)
  clear_has_v6();
  ::qpb::Ipv6Address* temp = v6_;
  v6_ = NULL;
  return temp;
}
void L3Address::set_allocated_v6(::qpb::Ipv6Address* v6) {
  delete v6_;
  v6_ = v6;
  if (v6) {
    set_has_v6();
  } else {
    clear_has_v6();
  }
  // @@protoc_insertion_point(field_set_allocated:qpb.L3Address.v6)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int L3Prefix::kLengthFieldNumber;
const int L3Prefix::kBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

L3Prefix::L3Prefix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qpb.L3Prefix)
}

void L3Prefix::InitAsDefaultInstance() {
}

L3Prefix::L3Prefix(const L3Prefix& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qpb.L3Prefix)
}

void L3Prefix::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  length_ = 0u;
  bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L3Prefix::~L3Prefix() {
  // @@protoc_insertion_point(destructor:qpb.L3Prefix)
  SharedDtor();
}

void L3Prefix::SharedDtor() {
  bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void L3Prefix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L3Prefix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L3Prefix_descriptor_;
}

const L3Prefix& L3Prefix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpb_2fqpb_2eproto();
  return *default_instance_;
}

L3Prefix* L3Prefix::default_instance_ = NULL;

L3Prefix* L3Prefix::New(::google::protobuf::Arena* arena) const {
  L3Prefix* n = new L3Prefix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void L3Prefix::Clear() {
// @@protoc_insertion_point(message_clear_start:qpb.L3Prefix)
  if (_has_bits_[0 / 32] & 3u) {
    length_ = 0u;
    if (has_bytes()) {
      bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool L3Prefix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qpb.L3Prefix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 length = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bytes;
        break;
      }

      // required bytes bytes = 2;
      case 2: {
        if (tag == 18) {
         parse_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qpb.L3Prefix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qpb.L3Prefix)
  return false;
#undef DO_
}

void L3Prefix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qpb.L3Prefix)
  // required uint32 length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->length(), output);
  }

  // required bytes bytes = 2;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qpb.L3Prefix)
}

::google::protobuf::uint8* L3Prefix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qpb.L3Prefix)
  // required uint32 length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->length(), target);
  }

  // required bytes bytes = 2;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qpb.L3Prefix)
  return target;
}

int L3Prefix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:qpb.L3Prefix)
  int total_size = 0;

  if (has_length()) {
    // required uint32 length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  if (has_bytes()) {
    // required bytes bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());
  }

  return total_size;
}
int L3Prefix::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:qpb.L3Prefix)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 length = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

    // required bytes bytes = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L3Prefix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qpb.L3Prefix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const L3Prefix* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const L3Prefix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qpb.L3Prefix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qpb.L3Prefix)
    MergeFrom(*source);
  }
}

void L3Prefix::MergeFrom(const L3Prefix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qpb.L3Prefix)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_bytes()) {
      set_has_bytes();
      bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void L3Prefix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qpb.L3Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L3Prefix::CopyFrom(const L3Prefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qpb.L3Prefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L3Prefix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void L3Prefix::Swap(L3Prefix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void L3Prefix::InternalSwap(L3Prefix* other) {
  std::swap(length_, other->length_);
  bytes_.Swap(&other->bytes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata L3Prefix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L3Prefix_descriptor_;
  metadata.reflection = L3Prefix_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// L3Prefix

// required uint32 length = 1;
bool L3Prefix::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void L3Prefix::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
void L3Prefix::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void L3Prefix::clear_length() {
  length_ = 0u;
  clear_has_length();
}
 ::google::protobuf::uint32 L3Prefix::length() const {
  // @@protoc_insertion_point(field_get:qpb.L3Prefix.length)
  return length_;
}
 void L3Prefix::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:qpb.L3Prefix.length)
}

// required bytes bytes = 2;
bool L3Prefix::has_bytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void L3Prefix::set_has_bytes() {
  _has_bits_[0] |= 0x00000002u;
}
void L3Prefix::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000002u;
}
void L3Prefix::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytes();
}
 const ::std::string& L3Prefix::bytes() const {
  // @@protoc_insertion_point(field_get:qpb.L3Prefix.bytes)
  return bytes_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void L3Prefix::set_bytes(const ::std::string& value) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qpb.L3Prefix.bytes)
}
 void L3Prefix::set_bytes(const char* value) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qpb.L3Prefix.bytes)
}
 void L3Prefix::set_bytes(const void* value, size_t size) {
  set_has_bytes();
  bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qpb.L3Prefix.bytes)
}
 ::std::string* L3Prefix::mutable_bytes() {
  set_has_bytes();
  // @@protoc_insertion_point(field_mutable:qpb.L3Prefix.bytes)
  return bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* L3Prefix::release_bytes() {
  // @@protoc_insertion_point(field_release:qpb.L3Prefix.bytes)
  clear_has_bytes();
  return bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void L3Prefix::set_allocated_bytes(::std::string* bytes) {
  if (bytes != NULL) {
    set_has_bytes();
  } else {
    clear_has_bytes();
  }
  bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:qpb.L3Prefix.bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IfIdentifier::kIndexFieldNumber;
const int IfIdentifier::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IfIdentifier::IfIdentifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:qpb.IfIdentifier)
}

void IfIdentifier::InitAsDefaultInstance() {
}

IfIdentifier::IfIdentifier(const IfIdentifier& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:qpb.IfIdentifier)
}

void IfIdentifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IfIdentifier::~IfIdentifier() {
  // @@protoc_insertion_point(destructor:qpb.IfIdentifier)
  SharedDtor();
}

void IfIdentifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void IfIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IfIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IfIdentifier_descriptor_;
}

const IfIdentifier& IfIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qpb_2fqpb_2eproto();
  return *default_instance_;
}

IfIdentifier* IfIdentifier::default_instance_ = NULL;

IfIdentifier* IfIdentifier::New(::google::protobuf::Arena* arena) const {
  IfIdentifier* n = new IfIdentifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IfIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:qpb.IfIdentifier)
  if (_has_bits_[0 / 32] & 3u) {
    index_ = 0u;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IfIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:qpb.IfIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "qpb.IfIdentifier.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:qpb.IfIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:qpb.IfIdentifier)
  return false;
#undef DO_
}

void IfIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:qpb.IfIdentifier)
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qpb.IfIdentifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:qpb.IfIdentifier)
}

::google::protobuf::uint8* IfIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:qpb.IfIdentifier)
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "qpb.IfIdentifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:qpb.IfIdentifier)
  return target;
}

int IfIdentifier::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:qpb.IfIdentifier)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IfIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:qpb.IfIdentifier)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const IfIdentifier* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IfIdentifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:qpb.IfIdentifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:qpb.IfIdentifier)
    MergeFrom(*source);
  }
}

void IfIdentifier::MergeFrom(const IfIdentifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:qpb.IfIdentifier)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IfIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:qpb.IfIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IfIdentifier::CopyFrom(const IfIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:qpb.IfIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IfIdentifier::IsInitialized() const {

  return true;
}

void IfIdentifier::Swap(IfIdentifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IfIdentifier::InternalSwap(IfIdentifier* other) {
  std::swap(index_, other->index_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IfIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IfIdentifier_descriptor_;
  metadata.reflection = IfIdentifier_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IfIdentifier

// optional uint32 index = 1;
bool IfIdentifier::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IfIdentifier::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void IfIdentifier::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void IfIdentifier::clear_index() {
  index_ = 0u;
  clear_has_index();
}
 ::google::protobuf::uint32 IfIdentifier::index() const {
  // @@protoc_insertion_point(field_get:qpb.IfIdentifier.index)
  return index_;
}
 void IfIdentifier::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:qpb.IfIdentifier.index)
}

// optional string name = 2;
bool IfIdentifier::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IfIdentifier::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void IfIdentifier::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void IfIdentifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& IfIdentifier::name() const {
  // @@protoc_insertion_point(field_get:qpb.IfIdentifier.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IfIdentifier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:qpb.IfIdentifier.name)
}
 void IfIdentifier::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:qpb.IfIdentifier.name)
}
 void IfIdentifier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:qpb.IfIdentifier.name)
}
 ::std::string* IfIdentifier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:qpb.IfIdentifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* IfIdentifier::release_name() {
  // @@protoc_insertion_point(field_release:qpb.IfIdentifier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void IfIdentifier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:qpb.IfIdentifier.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace qpb

// @@protoc_insertion_point(global_scope)
